lscpu cpu architecture
cat /proc/cpuinfo - what we are looking for is the flags, this lets us know the capability of the cpu (the instructions it supports)




system bus 
	- links together memory, cpu and I/O devices

cpu 
	- broken up into control unit (responsable toretrieving and decoding instructions, storing data in memory)
	- execution uint, where actual execution of instructions occurs
		- stores temp data in registers in CPU
		- uses flags to notify programmer of events
		
REGISTERS
	- [*]general purpose registers (32 bits wide)
		- EAX (access lower 16 bits using AX register, and then break down further into AH AL) |==EAX=={|=AH=|=AL=|}<-AX
			- Accumlator Register - used for storing operands and data from calls
		- EBX <AS ABOVE> |==EBX=={|=BH=|=BL=|}<-BX
			- base register - pointer to data
			- EXAMPLE OF BIT BREAKDOWN:
				gdb-peda$ i r ebx
				ebx            0xb7fa1ff4	0xb7fa1ff4 (32BITS)
				gdb-peda$ i r bx
				bx             0x1ff4	0x1ff4 (16BITS)
				gdb-peda$ i r bh
				bh             0x1f	0x1f (8BITS)
				gdb-peda$ i r bl
				bl             0xf4	0xf4 (8BITS)
		- ECX <AS ABOVE> |==ECX=={|=CH=|=CL=|}<-CX
		- EDX <AS ABOVE> ETC
			- data register - I/O pointer
		- ESP (can only access lower 16 bits using SP register) |==ESP==|==SP===|
			- stack pointer register <<SPECIFIC TO STACK MANIPULATION>>
		- EBP <AS ABOVE> ETC
			- stack data pointer register
		- ESI <AS ABOVE> ETC
			- data pointer registers for memory operations <<WILL BE USED FOR STRING MANIPULATION>>
		- EDI <AS ABOVE> ETC
			- data pointer registers for memory operations (same as ESI) <<WILL BE USED FOR STRING MANIPULATION>>
	- [*]segment registers  
			  |------------------|
		        CS|       Code       |               
			  |------------------|   
	  	        DS|       Data       |               
			  |------------------|    
		        SS|       Stack      |               
			  |------------------|   
		        ES|       Data       |               
			  |------------------|    
		        FS|       Data       |               
			  |------------------|  
		        GS|       Data       |               
			  |------------------|     
	- [*]flags, EIP
		- If an instruction, gets set to a ZERO value, then the ZERO flag gets set
		- EIP; THE HOLY GRAIL for code execution, points to the next instruction to be executed
	- [*]floating point registers (AKA x87)
		- ST(0) to ST(7), teh registers are 80bits, and behave like a stack (REST TO BE COVERED LATER DURING ASSEMBLY PROGRAMMING)
	- [*]MMX registers
		- Is an "Instruction Extension"
					- MMX
					- SSE
					- SSE2
					- SSE3
		- Is carved out of the FPU register	(FPU is 80bits wide, and the FIRST lower 64bits is assigned to MMX)
			    |------------------|
		       ST(0)|       MM0        |               
			    |------------------|   
	               ST(1)|       MM1        |               
			    |------------------|    
		       ST(2)|       MM2        |               
		            |------------------|   
		       ST(3)|       MM3        |               
		   	    |------------------|    
		       ST(4)|       MM4        |               
		  	    |------------------|  
		       ST(5)|       MM5        |               
		  	    |------------------|
		       ST(6)|       MM6        |               
			    |------------------|
		       ST(7)|       MM7        |               
	  		    |------------------|			
	- [*]XMM registers
		- Even bigger register (128bits) (REST TO BE COVERED LATER DURING ASSEMBLY PROGRAMMING)
	
	**********************************************************************************************************************************
	
	To analyse bash
	gdb /bin/bash
	break main (break execution when hitting main()
	run (run the program, it will break at main())
	info registers (get info on the cpu)
	
	(gdb) info registers OR i r
eax            0x1	1
ecx            0xbffff404	-1073744892
edx            0xbffff394	-1073745004
ebx            0xb7fa1ff4	-1208344588
esp            0xbffff35c	0xbffff35c
ebp            0xbffff368	0xbffff368
esi            0x0	0
edi            0x0	0
eip            0x805eba6	0x805eba6 <main+6>
eflags         0x246	[ PF ZF IF ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51


with general registers you can access either the entire 32bits, the lower 16 or selectively the bottom 2 8bit blocks
BUT NOT ALL OF THEM
the bottom 4 registers, ESP, EBP, ESI and EDI you can play with either top half or bottom half
WHY IS THIS
i do not know (yet)

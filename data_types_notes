in IA32
Data types
byte - 8 bits
word - 16 bits
double word - 32 bits
quad word - 64 bits
double quad word - 128 bits

Signed vs unsigned

unsigned double word
the whole 32 bits are dedicated to storing the value

signed double word
first 31bits are dedicated, and the last (most significant bit) is used to store the sign which can be pos or neg

defining initialised data
db = definedbyte
dw = definedword

dw = 'a' ; 0x61 0x00

declare UNinitialised (used for the bss segment)

buffer: resb 64 ;reserve 64 bytes
wordvar: resw 1 ;reserver 1 word

Special tokens {below are used to figure out the offset of the current instruction from somewhere else}
$ - evaluates to the current line
$$ - evaluates to the neginning of current section

Little endian
Lower byte gets stored in lower memory
higher in high memory

register
0A0B0C0D   mem
			0D  <=lower
			0C
			0B
			0A	<=higher
			
	EXAMPLE (we examine the next bit in this address in ascending order):
			(gdb) x/xb 0x080490aa
			0x80490aa <var4>:	0xdd
			(gdb) x/xb 0x080490ab
			0x80490ab <var4+1>:	0xcc
			(gdb) x/xb 0x080490ac
			0x80490ac <var4+2>:	0xbb
			(gdb) x/xb 0x080490ad
			0x80490ad <var4+3>:	0xaa
			(gdb) 

Instruction

					LABEL
	Identifier for where instruction is located
				INSTRUCTION
			The instruction itself
					OPERAND
		Arguments to the instruction (registers, memory locations, immediate values (not a reference)
		

**BONUS NOTE**
The primary difference between register and memory is that register holds the data that the CPU is currently processing whereas,
the memory holds the data the that will be required for processing
source: https://www.quora.com/What-is-the-difference-between-register-and-memory
Immediate Data can be used literally in an instruction to change the contents of a register or memory location.

MOV can move data:
	- Between Registers
	- Memory to register and Register to Memory
	- Immediate Data to register
	- Immediate Data to Memory

XCHG can exchange data:
	- Register,Register
	- Register,Memory
	
LEA can load effective address load pointer address
	- EXAMPLE: LEA EAX, [label] - Will load the pointer inside EAX, (the exact mem location where label is defined)
	
	
